class Solution {
public:
    //#1 Recursive Approach
    int findMinusingRecursion(vector<int>& coins, int amount){
        //Base condition
        if(amount==0){
            return 0;
        }

        if(amount<0){
            return INT_MAX;
        }

        int sum;
        int ans=INT_MAX;
        for(int i=0;i<coins.size();i++){
            if(coins[i]<=amount && (findMinusingRecursion(coins, amount-coins[i]) != INT_MAX) ){    
                sum=1+findMinusingRecursion(coins, amount-coins[i]);
                ans=min(ans,sum);
            }
        }
        return ans;
    }

    //#2 Top Down Approach
    int findMinUsingTopDown(vector<int>& coins, int amount, vector<int>& dp){
        //Base Condition
        if(amount==0){
            return 0;
        }

        if(amount<0){
            return INT_MAX;
        }

        if(dp[amount]!=-1){
            return dp[amount];
        }

        int min_amt=INT_MAX;
        for(int i=0;i<coins.size();i++){
            if(coins[i]<=amount && (findMinUsingTopDown(coins, amount-coins[i], dp) != INT_MAX) ){    
                int sum=1+findMinUsingTopDown(coins, amount-coins[i], dp);
                min_amt=min(min_amt,sum);
            }
        }
        dp[amount]=min_amt;
        return dp[amount];
    }

    //#3 Bottom-Up Approach
    int findMinUsingBottomUp(vector<int>& coins, int amount){
        // step 1
        vector<int> dp(amount+1, INT_MAX);

        // step 2
        dp[0]=0;

        // step 3
        for(int i=1;i<amount+1;i++){
            for(int j=0;j<coins.size();j++){
                if(i>=coins[j] && dp[i-coins[j]]!=INT_MAX){
                    int ans = 1+dp[i-coins[j]];
                    dp[i]=min(dp[i], ans);
                }
            }
        }

        return dp[amount];
    }

    int coinChange(vector<int>& coins, int amount) {

        // # 1.
        int ans=findMinusingRecursion(coins, amount);
        if(ans==INT_MAX){
            return -1;
        }
        else{
            return ans;
        }

        // # 2.
        vector<int> dp(amount+1,-1);
        int ans=findMinUsingTopDown(coins, amount, dp);
        if(ans==INT_MAX){
            return -1;
        }
        else{
            return ans;
        }


        // # 3.
        int ans=findMinUsingBottomUp(coins, amount);
        if(ans==INT_MAX){
            return -1;
        }
        else{
            return ans;
        }
    }
};
